{#---

# Matrix Report for Craft 3/4
Version 4.0.3

On sites with large matrix page-builders it can be difficult to know if and when different blocks are used. This template will give you a report for every Matrix block on your site. It can be filtered by:
- Matrix field
- Block types for that field
- Site block is used on (when more than 1 site exists)
- Entry status of parent entry
- Block status
Any entry, category, or global associated with a Matrix block assigned to it will output in this report.

## Setup
1. Copy the template to your craft templates folder. I prefer to keep a folder there called `queries` where I like to keep files like this.
2. Add these environment variables to your .env file to specify your dev, staging, and prod baseUrls.
    - `MATRIX_REPORT_PROD_URL`
    - `MATRIX_REPORT_STAGE_URL`
    - `MATRIX_REPORT_DEV_URL`
3. Login to your control panel as an admin. There is a `requireAdmin` conditional in the template so you must be an admin and logged in otherwise it will redirect to your front-end login page.
4. Go to the url where you placed the template, for me that is https://localsite.test/queries/blocks

## Gotchaâ€™s
- Sometimes orphan matrix blocks exist on a site even after running `craft utils/prune-orphaned-matrix-blocks` and this will cause this template to error that gives the ownerId of the orphan. Add that ID to an env named `MATRIX_REPORT_OWNER_FILTER`. For multiple values separate with a comma. It should look like: `MATRIX_REPORT_OWNER_FILTER=1989,2038`

## TODO
- Develop a version for Craft 5
- See if there is a way to provide multi-environment entry urls for multi-site installs (currently it hides the urls in this situation)
- Matrix blocks inside of Neo behave differently and do not output data about the page

---#}
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<script src="https://cdn.tailwindcss.com"></script>
<script src="//unpkg.com/alpinejs" defer></script>
<script src="https://cdn.jsdelivr.net/gh/tofsjonas/sortable@latest/sortable.min.js"></script>

{# Disable Seomatic output if it is installed and enabled #}
{% set plugin = craft.app.plugins.getPlugin('seomatic', false) %}
{% if plugin is not null and plugin.isInstalled %}
	{% do seomatic.config.renderEnabled(false) %}
{% endif %}

{% requireAdmin %}

<title>{{ systemName }} Matrix Block Report</title>
</head>

<body>

{# Default field will be the field with the most matrix block types #}
{% set defaultPageBuilder = craft.query()
	.select(['fieldId', 'COUNT(*) as fieldCount'])
	.from('{{%matrixblocktypes}}')
	.groupBy('fieldId')
	.orderBy('fieldCount desc')
	.limit(1)
	.all()
%}
{% set defaultPageBuilder = craft.app.fields.getFieldById((defaultPageBuilder|first).fieldId).handle %}

{# Hide all site filters if there is only 1 site #}
{% set sites = craft.app.sites.allSites()|length > 1 ? true : false %}

{# Set Base Urls for different environments #}
{% set prod    = getenv('MATRIX_REPORT_PROD_URL') %}
{% set staging = getenv('MATRIX_REPORT_STAGE_URL') %}
{% set dev     = getenv('MATRIX_REPORT_DEV_URL') %}

{# Orphan Ids to ignore #}
{% set ownerId = getenv('MATRIX_REPORT_OWNER_FILTER')|split(',') %}

{# Query params and their defaults #}
{% set fieldFilter       = craft.app.request.getQueryParam('field') ?? defaultPageBuilder %}
{% set blockFilter       = craft.app.request.getQueryParam('type') ?? null %}
{% set siteFilter        = craft.app.request.getQueryParam('site') %}
{% set statusFilter      = craft.app.request.getQueryParam('status') %}
{% set blockStatusFilter = craft.app.request.getQueryParam('blockstatus') %}

{# Get ID of the chosen Matrix field #}
{% set fieldId = craft.app.fields.getFieldByHandle(fieldFilter).id %}

{# Get Block Types for the chosen Matrix field #}
{% set blocks = craft.query()
	.select(['handle', 'name'])
	.from('{{%matrixblocktypes}}')
	.where({'fieldId': fieldId})
	.orderBy('sortOrder')
	.all()
%}

{# Filter blocks if there is a type filter selected #}
{% set blockTypes = blockFilter ? blocks|filter(matrixBlockType => matrixBlockType.handle == blockFilter) : blocks %}

{# Set default classes for element/block statuses #}
{% set statusColors = [
	{
		'status': 'live',
		'class': 'bg-green-500',
	},
	{
		'status': 'pending',
		'class': 'bg-orange-500',
	},
	{
		'status': 'expired',
		'class': 'bg-red-600',
	},
	{
		'status': 'disabled',
		'class': 'bg-white border border-gray-500',
	},
	{
		'status': 'trashed',
		'class': 'bg-gray-500',
	},
	{
		'status': 'drafts',
		'class': 'bg-gray-700',
	},
	{
		'status': 'enabled',
		'class': 'bg-green-500',
	},
] %}

{# Define some large TW classes #}
{% set dropdownClasses = 'flex items-center gap-2 bg-white px-5 py-2.5 rounded-md shadow hover:bg-blue-50' %}
{% set optionClasses = 'flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500' %}
{% set sortIconClasses = 'hidden ml-1 size-5 group-aria-[sort=ascending]:inline-flex group-aria-[sort=descending]:inline-flex group-aria-[sort=ascending]:rotate-0 group-aria-[sort=descending]:rotate-180' %}

{# SVG Icons so they can be resused #}
<svg width="0" height="0" class="hidden">
	<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20" id="pencil-square">
		<path d="m5.433 13.917 1.262-3.155A4 4 0 0 1 7.58 9.42l6.92-6.918a2.121 2.121 0 0 1 3 3l-6.92 6.918c-.383.383-.84.685-1.343.886l-3.154 1.262a.5.5 0 0 1-.65-.65Z"></path>
		<path d="M3.5 5.75c0-.69.56-1.25 1.25-1.25H10A.75.75 0 0 0 10 3H4.75A2.75 2.75 0 0 0 2 5.75v9.5A2.75 2.75 0 0 0 4.75 18h9.5A2.75 2.75 0 0 0 17 15.25V10a.75.75 0 0 0-1.5 0v5.25c0 .69-.56 1.25-1.25 1.25h-9.5c-.69 0-1.25-.56-1.25-1.25v-9.5Z"></path>
	</symbol>
	<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20" id="chevron-down">
		<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
	</symbol>
	<symbol xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20" id="arrows-down">
		<path fill-rule="evenodd" d="M10 3a.75.75 0 0 1 .75.75v10.638l3.96-4.158a.75.75 0 1 1 1.08 1.04l-5.25 5.5a.75.75 0 0 1-1.08 0l-5.25-5.5a.75.75 0 1 1 1.08-1.04l3.96 4.158V3.75A.75.75 0 0 1 10 3Z" clip-rule="evenodd"></path>
	</symbol>
</svg>

<div class="flex items-center justify-between max-w-[125rem] mx-auto my-8 space-x-4">
	<div class="flex items-center">
		{% if craft.app.getEditionName() not in ['Solo', 'Team'] and (craft.rebrand.isIconUploaded() or craft.rebrand.isLogoUploaded()) %}
			<a href="{{ url('/') }}"><img src="{{ craft.rebrand.getIcon() ? craft.rebrand.getIcon().url() : craft.rebrand.getLogo().url() }}" class="max-h-11" alt="{{ systemName }} logo"></a>
		{% else %}
			<a href="{{ url('/') }}" class="rounded-md bg-white px-3 py-1 font-bold leading-8 ring-1 ring-inset ring-indigo-600/10 hover:bg-blue-50">{{ systemName }}</a>
		{% endif %}
	</div>

	<div class="flex items-center justify-center space-x-4">
		<div
			x-data="filterDropdown()"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['field-filter']"
			class="relative"
		>
			<button
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('field-filter')"
				type="button"
				class="{{ dropdownClasses }}"
			>
				Matrix Field{{ fieldFilter ? (': <span class="text-[.8em]">' ~ craft.app.fields.getFieldByHandle(fieldFilter).name ~ '</span>')|raw }}
				<svg class="h-5 w-5 text-gray-400"><use xlink:href="#chevron-down"></use></svg>
			</button>

			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('field-filter')"
				style="display: none;"
				class="absolute left-0 mt-2 w-max rounded-md bg-white shadow-md z-50"
			>
				{# getFieldsByType doesn't work on Craft 3 so querying DB instead
					{% for field in craft.app.fields.getFieldsByType('craft\\fields\\Matrix') %}
				#}
				{% set matrixFields = craft.query()
					.select(['name', 'handle'])
					.from('{{%fields}}')
					.where({'type': 'craft\\fields\\Matrix', 'context': 'global'})
					.orderBy('name')
					.all()
				%}
				{% for field in matrixFields %}
					<a href="{{ url(craft.app.request.pathInfo, 'field=' ~ field.handle) }}" class="{{ optionClasses }} {{ field.handle == fieldFilter ? 'bg-blue-50' }}">
						{{ field.name }}
					</a>
				{% endfor %}
			</div>
		</div>

		<div
			x-data="filterDropdown()"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['block-filter']"
			class="relative"
		>
			<button
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('block-filter')"
				type="button"
				class="{{ dropdownClasses }}"
			>
				Block Type{{ blockFilter ? (': <span class="text-[.8em]">' ~ (blockTypes|first).name ~ '</span>')|raw }}
				<svg class="h-5 w-5 text-gray-400"><use xlink:href="#chevron-down"></use></svg>
			</button>

			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('block-filter')"
				style="display: none;"
				class="absolute left-0 mt-2 w-max rounded-md bg-white shadow-md z-50"
			>
				<a href="{{ url(craft.app.request.absoluteUrl, 'type=') }}" class="{{ optionClasses }} {{ blockFilter == '' ? 'bg-blue-50' }}">All Block Types</a>
				{% for blockType in blocks %}
					<a href="{{ url(craft.app.request.absoluteUrl, 'type=' ~ blockType.handle) }}" class="{{ optionClasses }} {{ blockType.handle == blockFilter ? 'bg-blue-50' }}">
						{{ blockType.name }}
					</a>
				{% endfor %}
			</div>
		</div>

		{% if sites %}
			<div
				x-data="filterDropdown()"
				x-on:keydown.escape.prevent.stop="close($refs.button)"
				x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
				x-id="['site-filter']"
				class="relative"
			>
				<button
					x-ref="button"
					x-on:click="toggle()"
					:aria-expanded="open"
					:aria-controls="$id('site-filter')"
					type="button"
					class="{{ dropdownClasses }}"
				>
					Site{{ siteFilter ? (': <span class="text-[.8em]">' ~ craft.app.sites.getSiteByHandle(siteFilter).name ~ '</span>')|raw }}
					<svg class="h-5 w-5 text-gray-400"><use xlink:href="#chevron-down"></use></svg>
				</button>

				<div
					x-ref="panel"
					x-show="open"
					x-transition.origin.top.left
					x-on:click.outside="close($refs.button)"
					:id="$id('site-filter')"
					style="display: none;"
					class="absolute left-0 mt-2 w-max rounded-md bg-white shadow-md z-50"
				>
					<a href="{{ url(craft.app.request.absoluteUrl, 'site=') }}" class="{{ optionClasses }} {{ siteFilter == '' ? 'bg-blue-50' }}">All Sites</a>
					{# List primary site first, then others in alpha order #}
					{% for site in craft.app.sites.allSites()|filter(site => site.primary == true) %}
						<a href="{{ url(craft.app.request.absoluteUrl, 'site=' ~ site.handle) }}" class="{{ optionClasses }} {{ site.handle == siteFilter ? 'bg-blue-50' }}">
							{{ site.name }}
						</a>
					{% endfor %}
					{% for site in craft.app.sites.allSites()|filter(site => site.primary == false)|sort((a, b) => a.name <=> b.name) %}
						<a href="{{ url(craft.app.request.absoluteUrl, 'site=' ~ site.handle) }}" class="{{ optionClasses }} {{ site.handle == siteFilter ? 'bg-blue-50' }}">
							{{ site.name }}
						</a>
					{% endfor %}
				</div>
			</div>
		{% endif %}

		<div
			x-data="filterDropdown()"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['entry-status']"
			class="relative"
		>
			<button
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('entry-status')"
				type="button"
				class="{{ dropdownClasses }}"
			>
				Entry Status{{ statusFilter ? (': <span class="text-[.8em]">' ~ statusFilter|capitalize ~ '</span>')|raw }}
				<svg class="h-5 w-5 text-gray-400"><use xlink:href="#chevron-down"></use></svg>
			</button>

			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('entry-status')"
				style="display: none;"
				class="absolute left-0 mt-2 w-max rounded-md bg-white shadow-md z-50"
			>
				<a href="{{ url(craft.app.request.absoluteUrl, 'status=') }}" class="{{ optionClasses }} {{ statusFilter == '' ? 'bg-blue-50' }}">
					All Statuses
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'status=live') }}" class="{{ optionClasses }} {{ statusFilter == 'live' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'live')|first.class }}" title="Live">
						<span class="sr-only">Live</span>
					</span>
					Live
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'status=pending') }}" class="{{ optionClasses }} {{ statusFilter == 'pending' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'pending')|first.class }}" title="Pending">
						<span class="sr-only">Pending</span>
					</span>
					Pending
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'status=expired') }}" class="{{ optionClasses }} {{ statusFilter == 'expired' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'expired')|first.class }}" title="Expired">
						<span class="sr-only">Expired</span>
					</span>
					Expired
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'status=disabled') }}" class="{{ optionClasses }} {{ statusFilter == 'disabled' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'disabled')|first.class }}" title="Disabled">
						<span class="sr-only">Disabled</span>
					</span>
					Disabled
				</a>
			</div>
		</div>

		<div
			x-data="filterDropdown()"
			x-on:keydown.escape.prevent.stop="close($refs.button)"
			x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
			x-id="['block-status']"
			class="relative"
		>
			<button
				x-ref="button"
				x-on:click="toggle()"
				:aria-expanded="open"
				:aria-controls="$id('block-status')"
				type="button"
				class="{{ dropdownClasses }}"
			>
				Block Status{{ blockStatusFilter ? (': <span class="text-[.8em]">' ~ blockStatusFilter|capitalize ~ '</span>')|raw }}
				<svg class="h-5 w-5 text-gray-400"><use xlink:href="#chevron-down"></use></svg>
			</button>

			<div
				x-ref="panel"
				x-show="open"
				x-transition.origin.top.left
				x-on:click.outside="close($refs.button)"
				:id="$id('block-status')"
				style="display: none;"
				class="absolute left-0 mt-2 w-max rounded-md bg-white shadow-md z-50"
			>
				<a href="{{ url(craft.app.request.absoluteUrl, 'blockstatus=') }}" class="{{ optionClasses }} {{ blockStatusFilter == '' ? 'bg-blue-50' }}">
					All Statuses
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'blockstatus=enabled') }}" class="{{ optionClasses }} {{ blockStatusFilter == 'enabled' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'enabled')|first.class }}" title="Enabled">
						<span class="sr-only">Enabled</span>
					</span>
					Enabled
				</a>
				<a href="{{ url(craft.app.request.absoluteUrl, 'blockstatus=disabled') }}" class="{{ optionClasses }} {{ blockStatusFilter == 'disabled' ? 'bg-blue-50' }}">
					<span class="rounded-full size-4 block {{ statusColors|filter(s => s.status == 'disabled')|first.class }}" title="Disabled">
						<span class="sr-only">Disabled</span>
					</span>
					Disabled
				</a>
			</div>
		</div>

	</div>

	<a href="{{ url(craft.app.request.pathInfo) }}" class="flex items-center gap-2 bg-white px-3 py-1.5 text-sm rounded-md shadow hover:bg-blue-50">Reset</a>
</div>

{% for matrixBlockType in blockTypes %}
	{% set blockQuery = craft.matrixBlocks.fieldId(fieldId).orderBy('id').site('*').type(matrixBlockType.handle).anyStatus().all()|filter(
		block => block.ownerId not in ownerId and
		(siteFilter == '' or block.owner.site.handle == siteFilter) and
		(statusFilter == '' or block.owner.status == statusFilter) and
		(blockStatusFilter == '' or block.status == blockStatusFilter)
	) %}
	<table class="max-w-[125rem] mx-auto my-8 relative text-left w-full sortable">
		<thead class="sticky top-0">
			<tr class="bg-white border border-b border-gray">
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					Title
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					URI
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					Section
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				{% if sites %}
					<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
						Site
						<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
					</th>
				{% endif %}
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					Entry
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				<th class="cursor-pointer py-1 px-3 select-none whitespace-nowrap hover:underline group">
					Block
					<svg class="{{ sortIconClasses }}"><use xlink:href="#arrows-down"></use></svg>
				</th>
				<th colspan="{{ sites == false and (prod or staging or dev) ? 4 : 1 }}" class="py-1 px-3 select-none whitespace-nowrap no-sort">
					Links
				</th>
			</tr>
			<tr class="bg-black !text-white">
				<th class="py-1 px-3">{{ blockQuery|length }}</th>
				<th class="py-1 px-3" colspan="{{ sites ? 10 : 9 }}"><h1>{{ matrixBlockType.name }}</h1></th>
			</tr>
		</thead>

		<tbody>
			{% for block in blockQuery %}
				<tr class="border border-b border-gray hover:bg-gray-100">
					<td class="py-1 px-3">{{ loop.index }}</td>
					<td class="py-1 px-3">{{ block.owner.title }}</td>
					<td class="py-1 px-3">
						{% if block.owner.url %}
							<a href="{{ url(block.owner.url) }}" class="hover:underline">{{ block.owner.uri }}</a>
						{% endif %}
					</td>
					<td class="py-1 px-3">
						{% if block.owner.fieldLayout.type ends with 'Category' %}
							{{ block.owner.group.name }} <span class="bg-gray-300 py-1 px-2 rounded text-[.625rem]">Category</span>
						{% elseif block.owner.fieldLayout.type ends with 'Entry' %}
							{{ block.owner.section.name }}
						{% elseif block.owner.fieldLayout.type ends with 'GlobalSet'%}
							{{ block.owner.name }} <span class="bg-gray-300 py-1 px-2 rounded text-[.625rem]">Global</span>
						{% endif %}
					</td>
					{% if sites %}
						<td class="py-1 px-3">{{ block.owner.site }}</td>
					{% endif %}
					<td class="py-1 px-3 text-center w-16">
						<span class="block mx-auto rounded-full size-4 {{ statusColors|filter(s => s.status == block.owner.status)|first.class }}" title="{{ block.owner.status|capitalize }}">
							<span class="sr-only">{{ block.owner.status|capitalize }}</span>
						</span>
					</td>
					<td class="py-1 px-3 text-center w-16">
						<span class="block mx-auto rounded-full size-4 {{ statusColors|filter(s => s.status == block.status)|first.class }}" title="{{ block.status|capitalize }}">
							<span class="sr-only">{{ block.status|capitalize }}</span>
						</span>
					</td>
					{% if block.owner.uri and sites == false %}
						{% if prod %}
							<td class="py-1 px-3 w-16">
								<a href="{{ url(prod ~ block.owner.uri ) }}" class="hover:underline">Prod</a>
							</td>
						{% endif %}
						{% if staging %}
							<td class="py-1 px-3 w-16">
								<a href="{{ url(staging ~ block.owner.uri ) }}" class="hover:underline">Stage</a>
							</td>
						{% endif %}
						{% if dev %}
							<td class="py-1 px-3 w-16">
								<a href="{{ url(dev ~ block.owner.uri ) }}" class="hover:underline">Dev</a>
							</td>
						{% endif %}
					{% endif %}
					<td class="py-1 px-3 w-11">
						{# Edit URL should be for Prod #}
						<a href="{{ prod ? block.owner.cpEditUrl|replace(currentSite.baseUrl, prod) : block.owner.cpEditUrl }}" class="hover:text-blue-500">
							<svg class="mx-auto size-5"><use xlink:href="#pencil-square"></use></svg>
						</a>
					</td>
				</tr>
			{% endfor %}
		</tbody>
	</table>
{% endfor %}

{# Alpine Dropdowns: https://alpinejs.dev/component/dropdown #}
{% js %}
	document.addEventListener('alpine:init', () => {
		Alpine.data('filterDropdown', () => (
			{
				open: false,
				toggle() {
					if (this.open) {
						return this.close()
					}

					this.$refs.button.focus()

					this.open = true
				},
				close(focusAfter) {
					if (! this.open) return

					this.open = false

					focusAfter && focusAfter.focus()
				}
			}
		)
	)});
{% endjs %}

</body>
</html>
